
import java.io.*;
import java.util.*;
import java.math.*;
public class Main {
	static BigInteger[] num;
	public static void main(String[] args){
		Scanner in = new Scanner(System.in);
		long n = in.nextLong();
		long m = in.nextLong();
		long p = in.nextLong();
		init(n, m);
		
		BigInteger n = new BigInteger(in.nextBigInteger().toString());
			System.out.println(n + " " + f(n));
	}//end main
	static BigInteger init(long n,long m){
		num = new BigInteger[n];
		BigInteger sum = BigInteger.ZERO;
		num[1] = BigInteger.ONE;num[2] = BigInteger.ONE;
		for (long i = 3; i <= Math.max(n, m); i ++) {num[(int)i] = num[(int)(i-1)].add(num[(int)(i-2)]);
			if (i <= n) sum = sum.add(num[(int)i]);
		}
	}
	
	
	
	static BigDecimal pow(BigDecimal n,BigInteger k){
		BigDecimal ret = new BigDecimal(1.0);
		while (k.compareTo(BigInteger.valueOf(0)) > 0){
			if (k.mod(BigInteger.valueOf(2)).longValue() == 1 ){
				ret = ret.multiply(n);
			}
			n = n.multiply(n);
			k = k.divide(BigInteger.valueOf(2));
			//System.out.println(ret);
		}
		return ret;
	}
	static BigInteger f(BigInteger n){
		BigDecimal sq5 = new BigDecimal(Math.sqrt(5.0));
		BigDecimal tmp1 = sq5.multiply(BigDecimal.valueOf(1.0))
			.subtract(BigDecimal.valueOf(1.0)).divide(BigDecimal.valueOf(2.0));
		BigDecimal tmp2 = sq5.add(BigDecimal.valueOf(1.0))
			.divide(BigDecimal.valueOf(2.0));
		System.out.println(pow(tmp2,n).subtract(pow(tmp1,n)));
		
		return (pow(tmp2,n).subtract(pow(tmp1,n))).toBigInteger();
	}
}//end Main
